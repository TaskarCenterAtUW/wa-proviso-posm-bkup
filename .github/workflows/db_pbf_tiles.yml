name: Export POSM Database to PBF and .pmtiles

on:
  schedule:
    - cron: '0 2 * * *' # Runs daily at 2 AM UTC
  workflow_dispatch:  # Allows manual trigger

jobs:
  backup:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # Use 'zulu' or 'adopt' if needed
          java-version: '21'

      - name: Verify Java Version
        run: java -version

      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup Backup File name
        run: echo "BACKUP_FILE=complete_$(date +"%Y-%m-%d").pbf" >> $GITHUB_ENV

      - name: Setup Output Folder name
        run: echo "OUTPUT_FOLDER=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: Install Osmosis
        run: sudo apt install osmosis
      
      - name: Install Osmium
        run: sudo apt-get install -y osmium-tool

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.TDEI_CORE_AZURE_CREDS }}
      - name: Set PostgreSQL Environment Variables
        run: |
          echo "PGHOST=${{ secrets.PG_HOST }}" >> $GITHUB_ENV
          echo "PGDATABASE=${{ secrets.PG_DATABASE }}" >> $GITHUB_ENV
          echo "PGUSER=${{ secrets.PG_USER }}" >> $GITHUB_ENV
          echo "PGPASSWORD=${{ secrets.PG_PASSWORD }}" >> $GITHUB_ENV
      
      - name: Create PBF using osmosis and PostgreSQL
        env:
          PGHOST: ${{ secrets.PG_HOST }}
          PGUSER: ${{ secrets.PG_USER }}
          PGPASSWORD: ${{ secrets.PG_PASSWORD }}
          PGDATABASE: ${{ secrets.PG_DATABASE }}
        run: |
          osmosis --read-apidb host=$PGHOST database=$PGDATABASE user=$PGUSER password=$PGPASSWORD validateSchemaVersion=no --write-pbf file=$BACKUP_FILE
          osmium export -v -o output.geojson $BACKUP_FILE 

      - name: Install Tippecanoe
        uses: astrosat/tippecanoe-action@master
      
      - name: Create .pmtiles using Tippecanoe
        run: tippecanoe -o output/proviso.pmtiles -Z 7 -z 18 -M 1000000 -l provisodata output.geojson --drop-densest-as-needed --force

      - name: Copy the created files into output folder
        run: |
          mkdir -p output
          cp output.geojson output/output.geojson
          cp $BACKUP_FILE output/$BACKUP_FILE
      
      - name: Check Backup File
        run: ls -lh
      - name: Upload the file to Azure Blob Storage
        uses: LanceMcCarthy/Action-AzureBlobUpload@v2
        with:
            source_folder: output
            connection_string: ${{ secrets.AZURE_STORAGE_CONNECTION }}
            container_name: 'waposmdbbkup'
            destination_folder: ${{env.OUTPUT_FOLDER}}
            delete_if_exists: 'true'